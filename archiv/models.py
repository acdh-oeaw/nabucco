# generated by appcreator

from django.db import models
from django.urls import reverse


from browsing.browsing_utils import model_to_dict


def set_extra(self, **kwargs):
    self.extra = kwargs
    return self


models.Field.set_extra = set_extra


class Archiv(models.Model):
    ### Archiv ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="alt id",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Archive id",
    )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="name",
        help_text="following GMTR 1",
    ).set_extra(
        is_public=True,
        data_lookup="Archive name",
    )
    part_of = models.ForeignKey(
        "Place",
        related_name='rvn_archiv_part_of_place',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="part of",
        help_text="Place of issue",
    ).set_extra(
        is_public=True,
        data_lookup="Is part of",
    )
    alt_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Alternative name",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Alternative name",
    )
    title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Title",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Title",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'name',
        ]
        verbose_name = "Archiv"
    
    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:archiv_browse')
    
    @classmethod
    def get_source_table(self):
        return "./data/csv/Archiv.csv"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "name"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:archiv_create')

    def get_absolute_url(self):
        return reverse('archiv:archiv_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:archiv_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:archiv_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:archiv_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:archiv_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:archiv_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Bibliography(models.Model):
    ### Bibliography ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="alt id",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Occurrence ID",
    )
    short_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Short Title",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Short title",
    )
    author = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Author",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Author",
    )
    publication_year = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Publication year",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Publication year",
    )
    title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Title",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Title",
    )
    volume_nr = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Volume no.",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Volume no.",
    )
    pages = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Pages",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Pages",
    )
    journal = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Journal",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Journal",
    )
    editor = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Editor",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Editor",
    )
    book = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Book",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Book",
    )
    mentioned_place = models.ManyToManyField(
        "Place",
        related_name='rvn_bibliography_mentioned_place_place',
        blank=True,
        verbose_name="Place mentioned on Tablet",
        help_text="whatever",
    ).set_extra(
        is_public=True,
    )
    mentioned_archive = models.ManyToManyField(
        "Archiv",
        related_name='rvn_bibliography_mentioned_archive_archiv',
        blank=True,
        verbose_name="Place mentioned on Tablet",
        help_text="whatever",
    ).set_extra(
        is_public=True,
    )
    mentioned_glossary_item = models.ManyToManyField(
        "Glossary",
        related_name='rvn_bibliography_mentioned_glossary_item_glossary',
        blank=True,
        verbose_name="mentioned_glossary_item",
        help_text="mentioned_glossary_item",
    ).set_extra(
        is_public=True,
    )
    related_publications = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="related_publications",
        help_text="whatever",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'short_title',
        ]
        verbose_name = "Bibliography"
    
    def __str__(self):
        if self.short_title:
            return "{}".format(self.short_title)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:bibliography_browse')
    
    @classmethod
    def get_source_table(self):
        return "./data/csv/Bibliography.csv"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "short_title"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:bibliography_create')

    def get_absolute_url(self):
        return reverse('archiv:bibliography_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:bibliography_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:bibliography_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:bibliography_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:bibliography_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:bibliography_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Glossary(models.Model):
    ### Glossary ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="alt id",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Concept ID",
    )
    pref_label = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Label",
        help_text="type of document",
    ).set_extra(
        is_public=True,
        data_lookup="Label",
    )
    hierarchy = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Hierarchy",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Hierarchy",
    )
    type = models.IntegerField(
        blank=True, null=True,
        verbose_name="Type",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Type",
    )
    title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Title",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Title",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'pref_label',
        ]
        verbose_name = "Glossary"
    
    def __str__(self):
        if self.pref_label:
            return "{}".format(self.pref_label)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:glossary_browse')
    
    @classmethod
    def get_source_table(self):
        return "./data/csv/Glossary.csv"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "pref_label"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:glossary_create')

    def get_absolute_url(self):
        return reverse('archiv:glossary_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:glossary_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:glossary_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:glossary_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:glossary_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:glossary_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Place(models.Model):
    ### Place ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="alt id",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Place id",
    )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Place name",
    )
    part_of = models.ForeignKey(
        "Place",
        related_name='rvn_place_part_of_place',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="part of",
        help_text="larger region",
    ).set_extra(
        is_public=True,
        data_lookup="Parent id",
    )
    title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Title",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Title",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'name',
        ]
        verbose_name = "Place"
    
    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:place_browse')
    
    @classmethod
    def get_source_table(self):
        return "./data/csv/Place.csv"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "name"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:place_create')

    def get_absolute_url(self):
        return reverse('archiv:place_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:place_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:place_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:place_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:place_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:place_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Tablet(models.Model):
    ### Tablet ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="alt id",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Object ID",
    )
    museum_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Museum No.",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Museum No.",
    )
    place_of_issue = models.ForeignKey(
        "Place",
        related_name='rvn_tablet_place_of_issue_place',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Place of issue",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Place of issue",
    )
    mentioned_place = models.ManyToManyField(
        "Place",
        related_name='rvn_tablet_mentioned_place_place',
        blank=True,
        verbose_name="Place mentioned on Tablet",
        help_text="whatever",
    ).set_extra(
        is_public=True,
    )
    type_content = models.ForeignKey(
        "Glossary",
        related_name='rvn_tablet_type_content_glossary',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Type and content",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Type and content",
    )
    key_word = models.ManyToManyField(
        "Glossary",
        related_name='rvn_tablet_key_word_glossary',
        blank=True,
        verbose_name="random keyword",
        help_text="whatever",
    ).set_extra(
        is_public=True,
    )
    paraphrase = models.TextField(
        blank=True, null=True,
        verbose_name="Paraphrase",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Paraphrase",
    )
    transliteration = models.TextField(
        blank=True, null=True,
        verbose_name="Transliteration",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Transliteration",
    )
    archiv = models.ForeignKey(
        "Archiv",
        related_name='rvn_tablet_archiv_archiv',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archive",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Archive",
    )
    mentioned_archiv = models.ManyToManyField(
        "Archiv",
        related_name='rvn_tablet_mentioned_archiv_archiv',
        blank=True,
        verbose_name="Archive",
        help_text="whatever",
    ).set_extra(
        is_public=True,
    )
    mentioned_in_pub = models.ManyToManyField(
        "Bibliography",
        related_name='rvn_tablet_mentioned_in_pub_bibliography',
        blank=True,
        verbose_name="Mentioned in Publication",
        help_text="whatever",
    ).set_extra(
        is_public=True,
    )
    publication_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Publication name",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Publication",
    )
    period = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Period",
        help_text="whatever",
    ).set_extra(
        is_public=True,
        data_lookup="Period",
    )
    day = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Babylonian Day",
        help_text="Day of month",
    ).set_extra(
        is_public=True,
        data_lookup="Day",
    )
    month = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Babylonian Month",
        help_text="Babylonian month (I-XII)",
    ).set_extra(
        is_public=True,
        data_lookup="Month",
    )
    year = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Babylonian Year",
        help_text="Regnal year",
    ).set_extra(
        is_public=True,
        data_lookup="Year",
    )
    king = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="King",
        help_text="King (abbreviated)",
    ).set_extra(
        is_public=True,
        data_lookup="King",
    )
    imported = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Imported (Person, date)",
        help_text="whatever",
    ).set_extra(
        is_public=False,
        data_lookup="Imported",
    )
    julian_date_year = models.IntegerField(
        blank=True, null=True,
        verbose_name="Year BCE",
        help_text="Year BCE",
    ).set_extra(
        is_public=True,
        data_lookup="Julian date year",
    )
    bibliography = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Bibliography",
        help_text="Bibliography",
    ).set_extra(
        is_public=True,
        data_lookup="Bibliography (free text)",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'id',
        ]
        verbose_name = "Tablet"
    
    def __str__(self):
        if self.museum_id:
            return "{}".format(self.museum_id)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:tablet_browse')
    
    @classmethod
    def get_source_table(self):
        return "./data/csv/Tablet.csv"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:tablet_create')

    def get_absolute_url(self):
        return reverse('archiv:tablet_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:tablet_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:tablet_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:tablet_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:tablet_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:tablet_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


